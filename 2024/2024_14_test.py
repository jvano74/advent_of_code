import re
from pathlib import Path
from typing import List, Dict, NamedTuple
from collections import defaultdict
from fractions import Fraction


class Puzzle:
    """
    --- Day 14: Restroom Redoubt ---
    One of The Historians needs to use the bathroom; fortunately, you know
    there's a bathroom near an unvisited location on their list, and so you're
    all quickly teleported directly to the lobby of Easter Bunny Headquarters.

    Unfortunately, EBHQ seems to have "improved" bathroom security again after
    your last visit. The area outside the bathroom is swarming with robots!

    To get The Historian safely to the bathroom, you'll need a way to predict
    where the robots will be in the future. Fortunately, they all seem to be
    moving on the tile floor in predictable straight lines.

    You make a list (your puzzle input) of all of the robots' current positions
    (p) and velocities (v), one robot per line. For example:

    p=0,4 v=3,-3
    p=6,3 v=-1,-3
    p=10,3 v=-1,2
    p=2,0 v=2,-1
    p=0,0 v=1,3
    p=3,0 v=-2,-2
    p=7,6 v=-1,-3
    p=3,0 v=-1,-2
    p=9,3 v=2,3
    p=7,3 v=-1,2
    p=2,4 v=2,-3
    p=9,5 v=-3,-3

    Each robot's position is given as p=x,y where x represents the number of
    tiles the robot is from the left wall and y represents the number of tiles
    from the top wall (when viewed from above). So, a position of p=0,0 means
    the robot is all the way in the top-left corner.

    Each robot's velocity is given as v=x,y where x and y are given in tiles per
    second. Positive x means the robot is moving to the right, and positive y
    means the robot is moving down. So, a velocity of v=1,-2 means that each
    second, the robot moves 1 tile to the right and 2 tiles up.

    The robots outside the actual bathroom are in a space which is 101 tiles
    wide and 103 tiles tall (when viewed from above). However, in this example,
    the robots are in a space which is only 11 tiles wide and 7 tiles tall.

    The robots are good at navigating over/under each other (due to a
    combination of springs, extendable legs, and quadcopters), so they can share
    the same tile and don't interact with each other. Visually, the number of
    robots on each tile in this example looks like this:

    1.12.......
    ...........
    ...........
    ......11.11
    1.1........
    .........1.
    .......1...

    These robots have a unique feature for maximum bathroom security: they can
    teleport. When a robot would run into an edge of the space they're in, they
    instead teleport to the other side, effectively wrapping around the edges.
    Here is what robot p=2,4 v=2,-3 does for the first few seconds:

    Initial state:
    ...........
    ...........
    ...........
    ...........
    ..1........
    ...........
    ...........

    After 1 second:
    ...........
    ....1......
    ...........
    ...........
    ...........
    ...........
    ...........

    After 2 seconds:
    ...........
    ...........
    ...........
    ...........
    ...........
    ......1....
    ...........

    After 3 seconds:
    ...........
    ...........
    ........1..
    ...........
    ...........
    ...........
    ...........

    After 4 seconds:
    ...........
    ...........
    ...........
    ...........
    ...........
    ...........
    ..........1

    After 5 seconds:
    ...........
    ...........
    ...........
    .1.........
    ...........
    ...........
    ...........

    The Historian can't wait much longer, so you don't have to simulate the
    robots for very long. Where will the robots be after 100 seconds?

    In the above example, the number of robots on each tile after 100 seconds
    has elapsed looks like this:

    ......2..1.
    ...........
    1..........
    .11........
    .....1.....
    ...12......
    .1....1....

    To determine the safest area, count the number of robots in each quadrant
    after 100 seconds. Robots that are exactly in the middle (horizontally or
    vertically) don't count as being in any quadrant, so the only relevant
    robots are:

    ..... 2..1.
    ..... .....
    1.... .....

    ..... .....
    ...12 .....
    .1... 1....

    In this example, the quadrants contain 1, 3, 4, and 1 robot. Multiplying
    these together gives a total safety factor of 12.

    Predict the motion of the robots in your list within a space which is 101
    tiles wide and 103 tiles tall. What will the safety factor be after exactly
    100 seconds have elapsed?

    Your puzzle answer was 221142636.

    --- Part Two ---
    During the bathroom break, someone notices that these robots seem awfully
    similar to ones built and used at the North Pole. If they're the same type
    of robots, they should have a hard-coded Easter egg: very rarely, most of
    the robots should arrange themselves into a picture of a Christmas tree.

    What is the fewest number of seconds that must elapse for the robots to
    display the Easter egg?

    Your puzzle answer was 7916.

    Both parts of this puzzle are complete! They provide two gold stars: **

    """


SAMPLE_ROBOTS = [
    "p=0,4 v=3,-3",
    "p=6,3 v=-1,-3",
    "p=10,3 v=-1,2",
    "p=2,0 v=2,-1",
    "p=0,0 v=1,3",
    "p=3,0 v=-2,-2",
    "p=7,6 v=-1,-3",
    "p=3,0 v=-1,-2",
    "p=9,3 v=2,3",
    "p=7,3 v=-1,2",
    "p=2,4 v=2,-3",
    "p=9,5 v=-3,-3",
]

with open(Path(__file__).parent / "2024_14_input.txt") as fp:
    MY_ROBOTS = fp.read().split("\n")


class V(NamedTuple):
    x: int
    y: int
    dx: int
    dy: int

    @classmethod
    def from_string(cls, string):
        x, y, dx, dy = re.search(
            r"p=(-?\d*),(-?\d*) v=(-?\d*),(-?\d*)", string
        ).groups()
        return cls(int(x), int(y), int(dx), int(dy))

    def step(self, ticks=1):
        return V(self.x + ticks * self.dx, self.y + ticks * self.dy, self.dx, self.dy)


class Bathroom:
    def __init__(self, robots, wide, tall):
        self.wide = wide
        self.tall = tall
        self.mid_x = (wide - 1) // 2
        self.mid_y = (tall - 1) // 2
        self.robots = dict()

        for robot_id, robot in enumerate(robots):
            self.robots[robot_id] = V.from_string(robot)

    def find_min_pixel_time(self):
        counts = defaultdict(set)
        for time in range(self.tall * self.wide):
            grid = set()
            for robot in self.robots.values():
                future_location = robot.step(time)
                mod_x = future_location.x % self.wide
                mod_y = future_location.y % self.tall
                grid.add((mod_x, mod_y))
            counts[len(grid)].add(time)
        max_count = max(counts.keys())
        min_count = min(counts.keys())
        return counts[min_count], counts[max_count]

    def display(self, time):
        grid = defaultdict(int)
        for robot in self.robots.values():
            future_location = robot.step(time)
            mod_x = future_location.x % self.wide
            mod_y = future_location.y % self.tall
            grid[(mod_x, mod_y)] += 1

        view = []
        for y in range(self.tall):
            scan_line = []
            for x in range(self.wide):
                if grid[(x, y)] > 0:
                    scan_line.append("#")
                else:
                    scan_line.append(".")
            view.append("".join(scan_line))
        return view

    def count_in_quadrant(self, time):
        grid_count = defaultdict(int)
        for robot in self.robots.values():
            future_location = robot.step(time)
            mod_x = future_location.x % self.wide
            mod_y = future_location.y % self.tall

            if mod_x == self.mid_x or mod_y == self.mid_y:
                continue

            x_pos = 0 if mod_x < self.mid_x else 1
            y_pos = 0 if mod_y < self.mid_y else 1
            grid_count[f"{x_pos}{y_pos}"] += 1

        result = 1
        for region in grid_count.values():
            result *= region

        return result


def test_sample():
    sample_bathroom = Bathroom(SAMPLE_ROBOTS, 11, 7)
    assert sample_bathroom.count_in_quadrant(100) == 12
    my_bathroom = Bathroom(MY_ROBOTS, 101, 103)
    assert my_bathroom.count_in_quadrant(100) == 221142636


TREE = """....................................................................................#................
.....................................................................................................
........................................#............................................................
................................................................................#....................
.....................................................................................................
...#.......................................#.....................................#....#..............
...........................................................................#.........................
...#.#.............................................................#.................................
..............................................................................#......................
..............................................................................................#......
.....................................................................................................
.....................................................................................................
.................................................#...................................................
.....................................................................................................
.....................................................................................................
....#..........................................................#.....................................
.............................................................................#.......................
...................###############################...........................................#.......
...................#.............................#...........#...........#...#.......................
.........#.........#.............................#........#.................#........................
...................#.............................#...................................................
...................#.............................#....................#..............................
...................#..............#..............#...#....#..........................................
..........#........#.............###.............#...................................................
.............#.....#............#####............#...................................................
...................#...........#######...........#........................#..........................
...................#..........#########..........#..#................................................
...................#............#####............#...................................................
...................#...........#######...........#...................................................
...................#..........#########..........#........................#..........................
...................#.........###########.........#.........................................#.....#...
...................#........#############........#...................................................
...................#..........#########..........#...................................................
...................#.........###########.........#..............#....................................
...................#........#############........#...................#...............................
...................#.......###############.......#...............................................#...
...................#......#################......#.............#.....................................
...................#........#############........#...................................................
.....#.............#.......###############.......#.....................#.............................
.........#.........#......#################......#...................................................
...................#.....###################.....#...................................................
...................#....#####################....#...............................................#...
...................#.............###.............#............................................#......
...................#.............###.............#...................................................
...................#.............###.............#...............#.............#...................#.
...................#.............................#...................................#...............
...................#.............................#........#..........................................
...................#.............................#...................................................
...................#.............................#.......................................#...........
...................###############################.............................#.....................
...........................................................#.........................................
.........................................................#......................#....................
....................#...#............................................................................
.....................................................................................................
.....................................................................................................
....................#.....#......................................#..............................#....
...............................#.....................................................................
........................................................#....#................................#......
..................................#......................................#................#..........
............#....................................................#...................................
............#....................................................................................#...
..............#.................#.............................#......................................
.....................................................................................................
.....................................................................................................
.......................................#...................#..............#..........................
..............................#......................................................................
...........................................#.........................#..................#..........#.
..................................#.#....................#...............#...........................
...............................................................#.....................................
.....................#...............................................................................
........................................................#........................................#...
.....................................................................................................
............................#.................................................................#......
..............................................#................#.....................................
.....................................................................................................
..#...............................#.....#......................#.....................................
.....................................................................................................
...............#...........................................................................#.........
..................................#..................................................................
..........................................................................#........#.................
.......................................#.............................................................
...............................................#.....................................................
............##.......................................................................................
...........#...................#....#..................................................#..........#..
.................#.........................................................................#.........
.....................................................................................................
.........#.......................#....................................#.....................#........
................................................................................#....#...............
.....................................................................................................
...........#................................................#....................................#...
...............................................................................#..##........#........
...................#.................................................................................
.................................................#...................................................
.........................................................................#....#......................
.....................................................................................#...............
.....................................................................................................
......................#.....................#..............#......................................#..
...........................................................................................##.......#
.....................................................................................................
...........................................#.........................................................
................................#........#......................................................#....
..#............................................................................................#.....
......#.......................................................................................#....#."""


def test_is_tree():
    my_bathroom = Bathroom(MY_ROBOTS, 101, 103)
    assert my_bathroom.find_min_pixel_time() == ({4280}, {7916})
    is_tree = my_bathroom.display(7916)
    assert "\n".join(is_tree) == TREE
